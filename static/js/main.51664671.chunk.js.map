{"version":3,"sources":["components/Nav/index.tsx","App/theme.tsx","components/Project/Item/index.tsx","components/Project/List/index.tsx","pages/Home/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","user","className","href","name","id","Theme","props","children","Item","description","data-testid","translate","List","Home","App","StrictMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oMAQaA,EAAS,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KACtB,OACE,qBAAKC,UAAU,iDAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,mBAAGC,KAAK,IAAR,SACE,oBAAID,UAAU,YAAd,UACO,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMG,OAAQ,0BAGnB,sBAAKF,UAAU,YAAf,UACE,qBAAIA,UAAU,wBAAd,UACE,6BACE,mBAAGC,KAAK,SAAR,qBAIF,6BACE,mBAAGA,KAAK,eAAR,8BAKJ,yBAAQC,KAAK,WAAWC,GAAG,WAA3B,UACE,kDACA,2DCjBGC,G,KAXD,SAACC,GACb,OACE,sBAAKL,UAAU,2BAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,OAAf,gBACGK,QADH,IACGA,OADH,EACGA,EAAOC,gBCNHC,EAAO,SAAC,GAAD,IAAEL,EAAF,EAAEA,KAAMM,EAAR,EAAQA,YAAR,OAClB,qBAAKC,cAAY,OAAOT,UAAU,QAAlC,SACE,sBAAKA,UAAU,gCAAf,UACE,oBAAIU,UAAU,KAAd,SAAoBR,IACpB,mBAAGF,UAAU,gBAAb,SAA8BQ,UCJvBG,EAAO,kBAClB,sBAAKX,UAAU,oFAAf,UACE,cAAC,EAAD,CAAME,KAAK,GAAGM,YAAY,KAC1B,cAAC,EAAD,CAAMN,KAAK,GAAGM,YAAY,KAC1B,cAAC,EAAD,CAAMN,KAAK,GAAGM,YAAY,KAC1B,cAAC,EAAD,CAAMN,KAAK,GAAGM,YAAY,KAC1B,cAAC,EAAD,CAAMN,KAAK,GAAGM,YAAY,KAC1B,cAAC,EAAD,CAAMN,KAAK,GAAGM,YAAY,SCPjBI,EAAO,kBAClB,mCACE,cAAC,EAAD,OCSWC,EAVH,WACV,OACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.51664671.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  user?: {\n    name: string;\n  }\n}\n\nexport const NavBar = ({user}: Props) => {\n  return (\n    <nav className=\"bg-white w-100 shadow p-4 fixed left-0 right-0\">\n      <div className=\"flex justify-between\">\n        <a href=\"/\">\n          <h3 className=\"font-bold\">\n            {user?.name || 'Thiago Farias Dutra'}\n          </h3>\n        </a>\n        <div className=\"space-x-6\">\n          <ul className=\"inline-flex space-x-3\">\n            <li>\n              <a href=\"#about\">\n                Sobre\n              </a>\n            </li>\n            <li>\n              <a href=\"#tecnologias\">\n                Tecnologias\n              </a>\n            </li>\n          </ul>\n          <select name=\"Language\" id=\"language\">\n            <option>Português</option>\n            <option>Inglês</option>\n          </select>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { NavBar } from 'components/Nav';\nimport React, { PropsWithChildren } from 'react';\nimport 'tailwindcss/tailwind.css';\n\nconst Theme = (props: PropsWithChildren<{}>) => {\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <NavBar/>\n      <div className=\"mt-3\">\n        {props?.children}\n      </div>\n    </div>\n  );\n};\n\nexport default Theme;\n","import React from 'react';\nimport { Project } from 'entities';\n\nexport const Item = ({name, description}: Project) => (\n  <div data-testid=\"item\" className=\"w-100\">\n    <div className=\"bg-white w-100 p-3 rounded-lg\">\n      <h3 translate=\"no\">{name}</h3>\n      <p className=\"text-gray-500\">{description}</p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { Item } from '../Item';\n\nexport const List = () => (\n  <div className=\"min-h-screen bg-gray-100 p-3 gap-2 grid grid-cols-1 md:grid-cols-3 sm:grid-cols-2\">\n    <Item name=\"\" description=\"\"/>\n    <Item name=\"\" description=\"\"/>\n    <Item name=\"\" description=\"\"/>\n    <Item name=\"\" description=\"\"/>\n    <Item name=\"\" description=\"\"/>\n    <Item name=\"\" description=\"\"/>\n  </div>\n);\n","import { List } from 'components/Project/List';\nimport React from 'react';\n\nexport const Home = () => (\n  <>\n    <List/>\n  </>\n);\n","import React from 'react';\nimport Theme from './theme';\nimport { Home } from 'pages/Home';\n\nconst App = () => {\n  return (\n    <React.StrictMode>\n      <Theme>\n        <Home />\n      </Theme>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\nimport './assets/css/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}