{"version":3,"sources":["components/StyledBase/index.tsx","App/theme.tsx","components/Typography/Title.tsx","components/Card/styles.ts","components/Card/index.tsx","pages/Home/index.tsx","router/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["StyledBase","createGlobalStyle","Theme","props","children","Title","styled","h1","CardHeader","div","CardBody","Card","title","card","Home","className","BaseRoutes","basename","require","homepage","exact","path","component","App","StrictMode","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2iEAEO,IAAMA,EAAaC,YAAH,KCURC,EATD,SAACC,GACb,OACE,2CACGA,QADH,IACGA,OADH,EACGA,EAAOC,SACR,kBAACJ,EAAD,Q,wHCJN,IAAMK,EAAQC,IAAOC,GAAV,K,sNCDJ,IAAMC,EAAaF,IAAOG,IAAV,KAKVC,EAAWJ,IAAOG,IAAV,KCUNE,EAbF,SAACR,GAAkB,IACdS,EAAYT,EAApBU,KAAQD,MAEhB,OACE,oCACE,kBAACJ,EAAD,KACE,4BAAKI,IAEP,kBAACF,EAAD,QCkBSI,EA1BF,WACX,OACE,oCACE,yBAAKC,UAAU,aACb,kBAACV,EAAD,mBAAmB,iBACnB,6BACE,+IAEoB,6BAFpB,qKAMA,kFAIF,yBAAKU,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAMF,KAAM,CAACD,MAAO,yBCfnBI,EAAa,WACxB,OACE,kBAAC,IAAD,CAAQC,SAAUC,EAAQ,IAAwBC,UAChD,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,MCIxBS,EAVH,WACV,OACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SCIFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCnGjEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDoBnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACpBC,GACA7B,OAAOC,SAAS6B,MAEJC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,GAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC7C/BE,K","file":"static/js/main.3c309cd7.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const StyledBase = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,700;1,400&display=swap');\n\n  :root {\n    --dark-bg-color: #4f5659;\n    --light-bg-color: #f2f2f2;\n\n    --light-font-color: #000;\n    --dark-font-color: #fff;\n\n    --font-color: var(--dark-font-color);\n    --bg-color: var(--dark-bg-color);\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing:border-box;\n  }\n\n  body {\n    font-family: 'Roboto', Arial, 'Helvetica Neue', sans-serif;\n    background-color: var(--bg-color);\n    color: var(--font-color);\n  }\n\n  p {\n    font-size: calc(1rem + .5vw);\n  }\n\n  .container {\n    max-width: 700px;\n    margin: auto;\n  }\n`;\n","import React, { PropsWithChildren } from 'react';\nimport { StyledBase } from 'components/StyledBase';\n\nconst Theme = (props: PropsWithChildren<{}>) => {\n  return (\n    <>\n      {props?.children}\n      <StyledBase />\n    </>\n  );\n};\n\nexport default Theme;\n","// import React from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n  font-size: calc(1.3rem + 1vw);\n`;\n\nexport { Title };\n","import styled from 'styled-components';\n\nexport const CardHeader = styled.div`\n    padding: 0.6rem;\n    filter: saturate(0.6);\n`;\n\nexport const CardBody = styled.div`\n    padding: 0.5rem;\n`;\n","import React from 'react';\nimport { Props } from '@comp/card';\nimport { CardBody, CardHeader } from './styles';\n\nconst Card = (props: Props) => {\n  const { card: { title } } = props;\n\n  return (\n    <>\n      <CardHeader>\n        <h3>{title}</h3>\n      </CardHeader>\n      <CardBody></CardBody>\n    </>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport { Title } from 'components/Typography/Title';\nimport Card from 'components/Card';\n\nconst Home = () => {\n  return (\n    <>\n      <div className=\"container\">\n        <Title>Bem vindo, {'{ user.name }'}</Title>\n        <div>\n          <p>\n            Este template foi criado para encurtar o esforço de desenvolvimento utilizando a ferramenta\n            create-react-app. <br/>\n            Ele estabelece um projeto base que pode ser utilizado para inumeras funções, com um exemplo\n            base de testes unitários encontrado na pasta &quot;src/__test__&quot;. \n          </p>\n          <p>\n            Edite o conteúdo da pasta &quot;src&quot; para começar\n          </p>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Card card={{title: 'Titulo do card'}} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { \n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom';\nimport Home from 'pages/Home';\n\nexport const BaseRoutes = () => {\n  return (\n    <Router basename={require('./../../package.json').homepage}>\n      <Route exact path=\"/\" component={Home} />\n    </Router>\n  );\n};\n","import React from 'react';\nimport Theme from './theme';\nimport { BaseRoutes } from 'router';\n\nconst App = () => {\n  return (\n    <React.StrictMode>\n      <Theme>\n        <BaseRoutes />\n      </Theme>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}