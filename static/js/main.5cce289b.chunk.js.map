{"version":3,"sources":["components/Container/index.tsx","components/Footer/index.tsx","components/Nav/index.tsx","App/theme.tsx","components/ProgramingLanguage/index.tsx","components/Project/Item/index.tsx","components/Project/index.ts","components/Project/List/index.tsx","factories/userFactory.ts","pages/Home/hooks.ts","api/github.api.ts","factories/ownerFactory.ts","factories/projectFactory.ts","components/Avatar/index.tsx","pages/Home/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Container","props","className","children","Footer","href","title","NavBar","Theme","colors","javascript","java","scala","typescript","nolang","ProgramingLanguage","language","toLowerCase","translate","Item","data-testid","src","owner","avatar","alt","name","width","height","loading","description","link","Project","List","projects","renderProjectList","useMemo","map","i","index","userFactory","gitUser","avatar_url","at","login","bio","html_url","useGitHub","useState","username","setUsername","setProjects","user","setUser","service","base","getUser","a","fetch","request","json","res","getProjects","repos","githubApi","useEffect","gitToProject","projectFactory","trim","then","shift","document","catch","console","error","finally","log","gitProj","github_username","Avatar","Home","hidden","App","StrictMode","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oMAEaA,EAAY,SAACC,GAAD,OACvB,qBAAKC,UAAU,UAAf,SACE,qBAAKA,UAAU,0CAAf,SACGD,EAAME,cCHAC,EAAS,kBACpB,mCACE,sBAAKF,UAAU,mDAAf,UACE,sBAAKA,UAAU,wBAAf,mCAEE,mBAAGA,UAAU,gBAAgBG,KAAK,0BAA0BC,MAAM,UAAlE,qBAFF,aAGE,mBAAGJ,UAAU,gBAAgBG,KAAK,4BAA4BC,MAAM,WAApE,iCAEF,sBAAKJ,UAAU,wBAAf,sCAEE,mBAAGA,UAAU,gBAAgBI,MAAM,cAAcD,KAAK,gCAAtD,kCCVKE,EAAS,WACpB,OACE,qBAAKL,UAAU,uDAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,mBAAGG,KAAK,YAAR,SACE,qBAAIH,UAAU,gBAAd,uBACY,sBAAMA,UAAU,yCAAhB,2BCUPM,G,MAZD,SAACP,GACb,OACE,sBAAKC,UAAU,2BAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,iBACGD,QADH,IACGA,OADH,EACGA,EAAOE,WAEV,cAAC,EAAD,SCXAM,EAAS,CACbC,WAAY,gBACZC,KAAM,UACNC,MAAO,WACPC,WAAY,gBACZC,OAAQ,aAOGC,EAAqB,SAACd,GAAD,OAChC,sBAAKC,UAAU,qDAAf,UACE,sBAAMA,UAAS,+BAA0BO,EAAOR,EAAMe,SAASC,kBAC/D,sBAAMC,UAAU,KAAhB,SAAsBjB,EAAMe,eCbnBG,EAAO,SAAClB,GAAD,OAClB,qBAAKmB,cAAY,OAAOlB,UAAU,QAAlC,SACE,qBAAKA,UAAU,uCAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,qBACEmB,IAAKpB,EAAMqB,MAAMC,OACjBC,IAAKvB,EAAMqB,MAAMG,KACjBC,MAAM,KACNC,OAAO,KACPzB,UAAU,yDACVI,MAAOL,EAAMqB,MAAMG,KACnBG,QAAQ,SAEV,oBACE1B,UAAU,gCACVgB,UAAU,KAFZ,SAGEjB,EAAMwB,UAEV,mBAAGvB,UAAU,sCAAb,SACGD,EAAM4B,cAET,uBACA,sBAAK3B,UAAU,iDAAf,UACE,cAAC,EAAD,CAAoBc,SAAUf,EAAMe,WACpC,qBAAKd,UAAU,wBAAf,SACE,mBACEA,UAAU,mBACVG,KAAMJ,EAAM6B,KACZxB,MAAOL,EAAMwB,KAHf,uCCvBGM,EAJC,CACdZ,OAAMa,KCAY,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,SACdC,EAAoBC,mBAAQ,WAChC,OAAOF,EAASG,KAAI,SAACC,EAAGC,GACtB,OACE,cAAC,EAAD,CAEEb,KAAMY,EAAEZ,KACRI,YAAaQ,EAAER,YACfb,SAAUqB,EAAErB,SACZc,KAAMO,EAAEP,KACRR,MAAOe,EAAEf,OALJgB,QASV,CAACL,IACJ,OACE,qCACE,oBAAI/B,UAAU,2BAAd,qCACA,qBAAKA,UAAU,uFAAf,SACGgC,S,8BClBIK,EAA6B,SAACC,GAAD,MAAc,CACtDf,KAAMe,EAAQf,KACdF,OAAQiB,EAAQC,WAChBC,GAAIF,EAAQG,MACZC,IAAKJ,EAAQI,IACbd,KAAMU,EAAQK,WCFHC,EAAY,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACtBC,EADsB,KACZC,EADY,OAEGF,mBAAS,IAFZ,mBAEtBd,EAFsB,KAEZiB,EAFY,OAGLH,mBAAS,MAHJ,mBAGtBI,EAHsB,KAGhBC,EAHgB,KAKvBC,EAAUlB,mBAAQ,kBCXD,SAACgB,GACxB,IAAMG,EAAO,yBAEPC,EAAO,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,GAAD,OAAIH,EAAJ,kBAAkBH,IAD/B,cACRO,EADQ,gBAEIA,EAAQC,OAFZ,cAERC,EAFQ,yBAGP,CAACA,IAHM,2CAAH,qDAYb,MAAO,CACLC,YAPe,uCAAG,8BAAAL,EAAA,sEACIC,MAAM,GAAD,OAAIH,EAAJ,kBAAkBH,EAAlB,WADT,cACZO,EADY,gBAEEA,EAAQC,OAFV,cAEZG,EAFY,yBAGXA,GAHW,2CAAH,qDAQfP,WDN4BQ,CAAUf,KAAW,CAACA,IAoCpD,OAlCAgB,qBAAU,WACR,IAAMC,EAAe,SAAC5B,GACpB,IEfuBZ,EAAcF,EFe/BD,GEfiBG,EFeIY,EAAEf,MAAMqB,MEfEpB,EFeKc,EAAEf,MAAMmB,WEfO,CAC7DhB,OACAF,WFcI,OGTwC,SAACE,EAAMI,EAAab,EAAUc,EAAMR,GAApC,MAA+C,CAC3FG,OACAI,cACAb,WACAc,OACAR,SHIW4C,CACL7B,EAAEZ,KACFY,EAAER,YACFQ,EAAErB,UAAU,SACZqB,EAAEQ,SACFvB,IAIkB,KAAnB0B,EAASmB,QACVd,EAAQE,UACLa,KADH,uCACQ,WAAM5B,GAAN,SAAAgB,EAAA,+EAAiBhB,EAAQJ,IAAIG,GAAa8B,SAA1C,2CADR,uDAEGD,MAAK,SAAAjB,GACJC,EAAQD,GACRmB,SAAShE,MAAT,6BAAgC6C,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAM1B,SAEvC8C,MAAMC,QAAQC,OACdC,SAAQ,kBAAMF,QAAQG,IAAI,mBAE7BtB,EAAQQ,cACLO,KADH,uCACQ,WAAMQ,GAAN,SAAApB,EAAA,+EAAiBoB,EAAQxC,IAAI6B,IAA7B,2CADR,uDAEGG,KAAKlB,GACLqB,MAAMC,QAAQC,OACdC,SAAQ,kBAAMF,QAAQG,IAAI,eAE7B,iCACGP,MAAK,SAAA/B,GAAC,OAAEY,EAAYZ,EAAEwC,oBACtBN,MAAMC,QAAQC,SAElB,CAACzB,IAEG,CACLf,WACAkB,SI5CS2B,EAAS,SAAC7E,GAAD,OACpB,qBAAKC,UAAU,eAAf,SACE,sBAAKA,UAAU,sCAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,qBACEmB,IAAKpB,EAAMkD,KAAK5B,OAChBC,IAAKvB,EAAMkD,KAAK1B,KAChBvB,UAAU,+DACVI,MAAOL,EAAMkD,KAAK1B,SAGtB,sBAAKvB,UAAU,oCAAf,UACE,oBAAGG,KAAMJ,EAAMkD,KAAKrB,KAAM5B,UAAU,gBAApC,cAAsDD,EAAMkD,KAAKT,MACjE,oBAAIxC,UAAU,qBAAd,SAAoCD,EAAMkD,KAAK1B,OAC/C,4BAAIxB,EAAMkD,KAAKP,eChBVmC,EAAO,WAAO,IAAD,EACGjC,IAAnBb,EADgB,EAChBA,SAAUkB,EADM,EACNA,KAClB,OACE,qCACE,qBAAK6B,QAAS7B,EAAd,SACIA,GAAQ,cAAC,EAAD,CAAQA,KAAMA,MAE1B,cAAC,EAAQnB,KAAT,CACEC,SAAUA,QCCHgD,EAVH,WACV,OACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,cAAC,EAAD,IACAnB,SAASoB,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAMuB,c","file":"static/js/main.5cce289b.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react';\n\nexport const Container = (props: PropsWithChildren<{}>) => (\n  <div className=\"content\">\n    <div className=\"w-full sm:w-11/12 md:w-5/6 mx-auto px-3\">\n      {props.children}\n    </div>\n  </div>\n);\n","import React from 'react';\n\nexport const Footer = () => (\n  <>\n    <div className=\"h-52 bg-gray-200 flex flex-col justify-end pb-20\">\n      <div className=\"text-center text-base\">\n        &nbsp;Icons made by &nbsp;\n        <a className=\"text-blue-600\" href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from &nbsp;\n        <a className=\"text-blue-600\" href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>\n      </div>\n      <div className=\"text-center text-base\">\n        Portif√≥lio template by \n        <a className=\"text-blue-600\" title=\"@githiago-f\" href=\"https://github.com/githiago-f\">@githiago-f</a>\n      </div>\n    </div>\n  </>\n);\n","import React from 'react';\n\nexport const NavBar = () => {\n  return (\n    <nav className=\"bg-white w-100 shadow p-4 fixed left-0 top-0 right-0\">\n      <div className=\"flex justify-between\">\n        <a href=\"/about-me\">\n          <h3 className=\"font-bold p-1\">\n            Portfolio <span className=\"bg-blue-600 px-2 text-white rounded-md\">dev</span>\n          </h3>\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import React, { PropsWithChildren } from 'react';\nimport { Container } from 'components/Container';\nimport { Footer } from 'components/Footer';\nimport { NavBar } from 'components/Nav';\nimport 'tailwindcss/tailwind.css';\n\nconst Theme = (props: PropsWithChildren<{}>) => {\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <NavBar/>\n      <Container>\n        {props?.children}\n      </Container>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default Theme;\n","import React from 'react';\n\nconst colors = {\n  javascript: 'bg-javascript',\n  java: 'bg-java',\n  scala: 'bg-scala',\n  typescript: 'bg-typescript',\n  nolang: 'bg-nolang'\n};\n\ntype Lang = keyof typeof colors;\n\ntype Props = {language: Lang};\n\nexport const ProgramingLanguage = (props: Props) => (\n  <div className=\"flex flex-row items-center justify-start space-x-2\">\n    <span className={`rounded-full p-1 h-1 ${colors[props.language.toLowerCase() as Lang]}`}></span>\n    <span translate=\"no\">{props.language}</span>\n  </div>\n);\n\n","import React from 'react';\nimport { Project } from 'entities';\nimport { ProgramingLanguage } from 'components/ProgramingLanguage';\n\nexport const Item = (props: Project) => (\n  <div data-testid=\"item\" className=\"w-100\">\n    <div className=\"bg-white w-100 p-3 rounded-lg shadow\">\n      <div className=\"flex flex-col\">\n        <div className=\"flex space-x-2 py-3\">\n          <img\n            src={props.owner.avatar}\n            alt={props.owner.name}\n            width=\"32\"\n            height=\"32\"\n            className=\"rounded-full object-contain border-purple-800 border-2\"\n            title={props.owner.name}\n            loading=\"lazy\"\n          />\n          <h3\n            className=\"font-medium text-2xl truncate\" \n            translate=\"no\"\n          >{props.name}</h3>\n        </div>\n        <p className=\"text-gray-500 text-sm py-2 truncate\">\n          {props.description}\n        </p>\n        <hr/>\n        <div className=\"flex flex-col sm:flex-row justify-between pt-2\">\n          <ProgramingLanguage language={props.language as any}/>\n          <div className=\"flex flex-row-reverse\">\n            <a \n              className=\"btn-view-project\" \n              href={props.link}\n              title={props.name}\n            >\n              View project\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import { Item } from './Item';\nimport { List } from './List';\n\nconst Project = {\n  Item, List\n};\n\nexport default Project;\n","import React, { useMemo } from 'react';\nimport { Project } from 'entities';\nimport { Item } from '../Item';\n\nexport const List = ({projects}: {projects: Project[]}) => {\n  const renderProjectList = useMemo(() => {\n    return projects.map((i, index) => {\n      return (\n        <Item \n          key={index}\n          name={i.name} \n          description={i.description} \n          language={i.language}\n          link={i.link}\n          owner={i.owner}\n        />\n      );\n    });\n  }, [projects]);\n  return (\n    <>\n      <h2 className=\"text-3xl py-12 font-bold\">Projects I&apos;m working on</h2>\n      <div className=\"bg-gray-100 pb-5 gap-2 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4\">\n        {renderProjectList}\n      </div>\n    </>\n  );\n};\n","import { User } from 'entities';\nimport { GitUser } from 'value-objects';\n\ntype userFactoryFn = (gitUser: GitUser) => User\n\nexport const userFactory: userFactoryFn = (gitUser) => ({\n  name: gitUser.name,\n  avatar: gitUser.avatar_url,\n  at: gitUser.login,\n  bio: gitUser.bio,\n  link: gitUser.html_url\n});\n","import { useEffect, useMemo, useState } from 'react';\nimport { githubApi } from 'api/github.api';\nimport { Project, User } from 'entities';\nimport { ownerFactory } from 'factories/ownerFactory';\nimport { projectFactory } from 'factories/projectFactory';\nimport { userFactory } from 'factories/userFactory';\nimport { Git } from 'value-objects';\n\nexport const useGitHub = () => {\n  const [username, setUsername] = useState('');\n  const [projects, setProjects] = useState([] as Project[]);\n  const [user, setUser] = useState(null as User | null | undefined);\n  \n  const service = useMemo(() => githubApi(username), [username]);\n  \n  useEffect(() => {\n    const gitToProject = (i: Git) => {\n      const owner = ownerFactory(i.owner.login, i.owner.avatar_url);\n      return projectFactory(\n        i.name,\n        i.description,\n        i.language||'nolang',\n        i.html_url,\n        owner\n      );\n    };\n\n    if(username.trim()!== ''){\n      service.getUser()\n        .then(async gitUser => gitUser.map(userFactory).shift())\n        .then(user => {\n          setUser(user);\n          document.title = `Portfolio | ${user?.name}`;\n        })\n        .catch(console.error)\n        .finally(() => console.log('user loaded!'));\n      \n      service.getProjects()\n        .then(async gitProj => gitProj.map(gitToProject))\n        .then(setProjects)\n        .catch(console.error)\n        .finally(() => console.log('loaded!'));\n    } else {\n      import('config/config.json')\n        .then(i=>setUsername(i.github_username))\n        .catch(console.error);\n    }\n  }, [username]);\n\n  return {\n    projects,\n    user\n  };\n};\n","import { GitUser, Git } from 'value-objects';\n\nexport const githubApi = (user: string) => {\n  const base = 'https://api.github.com';\n\n  const getUser = async () => {\n    const request = await fetch(`${base}/users/${user}`);\n    const res = await request.json() as GitUser;\n    return [res];\n  };\n\n  const getProjects = async () => {\n    const request = await fetch(`${base}/users/${user}/repos`);\n    const repos = await request.json() as Git[];\n    return repos;\n  };\n\n  return {\n    getProjects,\n    getUser\n  };\n};\n","import { OwnerMiniature } from 'entities';\n\nexport const ownerFactory = (name: string, avatar: string) => ({\n  name,\n  avatar\n} as OwnerMiniature);\n","import { OwnerMiniature, Project } from 'entities';\n\ntype ProjectFactory = (\n  name: string, \n  description: string, \n  language: string, \n  link: string,\n  owner: OwnerMiniature) => Project;\n\nexport const projectFactory: ProjectFactory = (name, description, language, link, owner) => ({\n  name,\n  description,\n  language,\n  link,\n  owner\n});\n","import React from 'react';\nimport { User } from 'entities';\n\ntype Props = {\n  user: User;\n}\n\nexport const Avatar = (props: Props) => (\n  <div className=\"w-full py-10\">\n    <div className=\"flex flex-col sm:flex-row space-x-7\">\n      <div className=\"flex flex-col-reverse\">\n        <img\n          src={props.user.avatar}\n          alt={props.user.name}\n          className=\"rounded-full border-purple-800 border-2 mx-auto sm:mx-0 h-28\"\n          title={props.user.name}\n        />\n      </div>\n      <div className=\"flex flex-col justify-center pt-5\">\n        <a href={props.user.link} className=\"text-blue-800\">@{props.user.at}</a>\n        <h2 className=\"text-4xl font-bold\">{props.user.name}</h2>\n        <p>{props.user.bio}</p>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport Project from 'components/Project';\nimport { useGitHub } from './hooks';\nimport { Avatar } from 'components/Avatar';\n\nexport const Home = () => {\n  const { projects, user } = useGitHub();\n  return (\n    <>\n      <div hidden={!user}>\n        {(user && <Avatar user={user} />)}\n      </div>\n      <Project.List\n        projects={projects}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport Theme from './theme';\nimport { Home } from 'pages/Home';\n\nconst App = () => {\n  return (\n    <React.StrictMode>\n      <Theme>\n        <Home />\n      </Theme>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\nimport './assets/css/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}