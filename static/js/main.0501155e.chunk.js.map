{"version":3,"sources":["utils/event.layer.ts","components/Container/index.tsx","context/language.context.ts","components/Language/index.tsx","components/Nav/index.tsx","App/theme.tsx","components/ProgramingLanguage/index.tsx","components/Project/Item/index.tsx","components/Project/index.ts","components/Project/List/index.tsx","factories/userFactory.ts","pages/Home/hooks.ts","api/github.api.ts","factories/ownerFactory.ts","factories/projectFactory.ts","components/Avatar/index.tsx","pages/Home/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["EventType","Container","props","className","children","EventLayer","events","this","event","index","eventGroup","callback","push","console","log","aList","splice","args","forEach","observer","instance","eventLayer","LangaugeContext","createContext","language","possibleLanguages","changeLanguage","Language","useContext","renderOptions","useMemo","map","i","idx","value","label","name","onChange","title","id","defaultValue","NavBar","href","Theme","colors","javascript","java","scala","typescript","nolang","ProgramingLanguage","toLowerCase","translate","Item","data-testid","src","alt","loading","owner","avatar","width","height","description","link","Project","List","projects","renderProjectList","userFactory","gitUser","avatar_url","at","login","bio","html_url","useGitHub","username","service","user","base","getUser","a","fetch","request","json","res","getProjects","repos","githubApi","useState","setProjects","setUser","useEffect","gitToProject","projectFactory","then","shift","catch","error","finally","gitProj","Avatar","Home","hidden","App","langHooksValue","setPossibleLanguages","setLanguage","languages","on","LANG_CHANGE","lang","ev","target","emit","useLanguage","StrictMode","Provider","data-language","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0501155e.chunk.js","sourcesContent":["\nexport enum EventType {\n  LANG_CHANGE = 'changeLang',\n}\n\ntype EventObj = {\n  [key in EventType]: Function[]\n};\n\ntype EventResult = {\n  eventGroup: EventType;\n  index: number;\n}\n\nclass EventLayer {\n  public static readonly instance = new EventLayer();\n  private events: EventObj;\n  private constructor() {\n    this.events = {} as EventObj;\n  }\n\n  private event(event: EventType, index: number): EventResult {\n    return {\n      eventGroup: event,\n      index\n    };\n  }\n\n  public on(event: EventType, callback: Function) {\n    this.events[event] = this.events[event] || [];\n    const index = this.events[event]?.push(callback);\n    console.log(this.events);\n    return this.event(event, index - 1);\n  }\n\n  public off(event: EventResult) {\n    const aList = this.events[event.eventGroup]\n      .splice(event.index, 1);\n    this.events[event.eventGroup] = aList;\n  }\n\n  public emit(event: EventType, ...args: any[]) {\n    if(!this.events[event]) {\n      return;\n    }\n    this.events[event].forEach(observer => observer(...args));\n  }\n}\n\nexport const eventLayer = EventLayer.instance;\n","import React, { PropsWithChildren } from 'react';\n\nexport const Container = (props: PropsWithChildren<{}>) => (\n  <div className=\"content\">\n    <div className=\"w-full sm:w-11/12 md:w-5/6 mx-auto px-3\">\n      {props.children}\n    </div>\n  </div>\n);\n","import { ChangeEvent, createContext, useEffect, useState } from 'react';\nimport { eventLayer, EventType } from 'utils/event.layer';\nimport { LanguageOption } from 'value-objects';\n\nexport const LangaugeContext = createContext({\n  language: 'pt-br',\n  possibleLanguages: [] as LanguageOption[],\n  changeLanguage: (() => {}) as (ev: ChangeEvent<HTMLSelectElement>) => void\n});\n\nexport const useLanguage = () => {\n  const [possibleLanguages, setPossibleLanguages] = useState([] as LanguageOption[]);\n  const [language, setLanguage] = useState('en');\n\n  useEffect(() => {\n    import('locale/config.json')\n      .then(i=>setPossibleLanguages(i.languages))\n      .catch(console.error);\n\n    eventLayer.on(EventType.LANG_CHANGE, (lang: string) => {\n      setLanguage(lang);\n    });\n  }, []);\n\n  const changeLanguage = (ev: ChangeEvent<HTMLSelectElement>) => {\n    const lang = ev.target.value;\n    eventLayer.emit(EventType.LANG_CHANGE, lang);\n  };\n\n  return {\n    language,\n    possibleLanguages,\n    changeLanguage\n  };\n};\n","import { LangaugeContext } from 'context/language.context';\nimport React, { useContext, useMemo } from 'react';\n\nexport const Language = () => {\n  const {possibleLanguages, changeLanguage, language} = useContext(LangaugeContext);\n\n  const renderOptions = useMemo(() => {\n    return possibleLanguages.map((i, idx) => (\n      <option \n        key={idx}\n        value={i.value}\n      >{i.label}</option>\n    ));\n  }, [possibleLanguages]);\n\n  return (\n    <select \n      name=\"language\" \n      onChange={changeLanguage}\n      title=\"Select your language\" \n      id=\"language\"\n      className=\"p-1 border-gray-400 border-2 rounded-md\"\n      defaultValue={language}\n    >\n      {renderOptions}\n    </select>\n  );\n};\n","import React from 'react';\nimport { Language } from 'components/Language';\n\nexport const NavBar = () => {\n  return (\n    <nav className=\"bg-white w-100 shadow p-4 fixed left-0 top-0 right-0\">\n      <div className=\"flex justify-between\">\n        <a href=\"/\">\n          <h3 className=\"font-bold p-1\">\n            Portifólio <span className=\"bg-blue-600 px-2 text-white rounded-md\">dev</span>\n          </h3>\n        </a>\n        <div className=\"space-x-6\">\n          <ul className=\"inline-flex space-x-3\">\n            <li>\n              <a href=\"#about\">\n                Sobre\n              </a>\n            </li>\n            <li>\n              <a href=\"#tecnologias\">\n                Tecnologias\n              </a>\n            </li>\n          </ul>\n          <Language/>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Container } from 'components/Container';\nimport { NavBar } from 'components/Nav';\nimport React, { PropsWithChildren } from 'react';\nimport 'tailwindcss/tailwind.css';\n\nconst Theme = (props: PropsWithChildren<{}>) => {\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <NavBar/>\n      <Container>\n        {props?.children}\n      </Container>\n    </div>\n  );\n};\n\nexport default Theme;\n","import React from 'react';\n\nconst colors = {\n  javascript: 'bg-javascript',\n  java: 'bg-java',\n  scala: 'bg-scala',\n  typescript: 'bg-typescript',\n  nolang: 'bg-nolang'\n};\n\ntype Lang = keyof typeof colors;\n\ntype Props = {language: Lang};\n\nexport const ProgramingLanguage = (props: Props) => (\n  <div className=\"flex flex-row items-center justify-start space-x-2\">\n    <span className={`rounded-full p-1 h-1 ${colors[props.language.toLowerCase() as Lang]}`}></span>\n    <span translate=\"no\">{props.language}</span>\n  </div>\n);\n\n","import React from 'react';\nimport { Project } from 'entities';\nimport { ProgramingLanguage } from 'components/ProgramingLanguage';\n\nexport const Item = (props: Project) => (\n  <div data-testid=\"item\" className=\"w-100\">\n    <div className=\"bg-white w-100 p-3 rounded-lg shadow\">\n      <div>\n        <img \n          src={`https://via.placeholder.com/300x300?text=${props.language}`}\n          alt=\"Project's thumbnail\"\n          loading=\"lazy\"\n          className=\"object-cover h-48 w-full rounded-sm\"\n        />\n      </div>\n      <div className=\"flex flex-col\">\n        <div className=\"flex space-x-2 py-3\">\n          <img\n            src={props.owner.avatar}\n            alt={props.owner.name}\n            width=\"32\"\n            height=\"32\"\n            className=\"rounded-full object-contain border-purple-800 border-2\"\n            title={props.owner.name}\n            loading=\"lazy\"\n          />\n          <h3\n            className=\"font-medium text-2xl truncate\" \n            translate=\"no\"\n          >{props.name}</h3>\n        </div>\n        <p className=\"text-gray-500 text-sm py-2 truncate\">\n          {props.description}\n        </p>\n        <hr/>\n        <div className=\"flex flex-row justify-between pt-2\">\n          <ProgramingLanguage language={props.language as any}/>\n          <div className=\"flex flex-row-reverse\">\n            <a \n              className=\"p-2 focus:bg-gray-400 hover:bg-gray-300 rounded-md\" \n              href={props.link}\n            >\n              View project\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import { Item } from './Item';\nimport { List } from './List';\n\nconst Project = {\n  Item, List\n};\n\nexport default Project;\n","import React, { useMemo } from 'react';\nimport { Project } from 'entities';\nimport { Item } from '../Item';\n\nexport const List = ({projects}: {projects: Project[]}) => {\n  const renderProjectList = useMemo(() => {\n    return projects.map((i, index) => {\n      return (\n        <Item \n          key={index}\n          name={i.name} \n          description={i.description} \n          language={i.language}\n          link={i.link}\n          owner={i.owner}\n        />\n      );\n    });\n  }, [projects]);\n  return (\n    <>\n      <h2 className=\"text-3xl py-12 font-bold\">Projects I&apos;m working on</h2>\n      <div className=\"bg-gray-100 pb-5 gap-2 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4\">\n        {renderProjectList}\n      </div>\n    </>\n  );\n};\n","import { User } from 'entities';\nimport { GitUser } from 'value-objects';\n\ntype userFactoryFn = (gitUser: GitUser) => User\n\nexport const userFactory: userFactoryFn = (gitUser) => ({\n  name: gitUser.name,\n  avatar: gitUser.avatar_url,\n  at: gitUser.login,\n  bio: gitUser.bio,\n  link: gitUser.html_url\n});\n","import { githubApi } from 'api/github.api';\nimport { Project, User } from 'entities';\nimport { ownerFactory } from 'factories/ownerFactory';\nimport { projectFactory } from 'factories/projectFactory';\nimport { userFactory } from 'factories/userFactory';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Git } from 'value-objects';\n\nexport const useGitHub = (username: string) => {\n  const service = useMemo(() => githubApi(username), []);\n  const [projects, setProjects] = useState([] as Project[]);\n  const [user, setUser] = useState(null as User | null | undefined);\n\n  useEffect(() => {\n    const gitToProject = (i: Git) => {\n      const owner = ownerFactory(i.owner.login, i.owner.avatar_url);\n      return projectFactory(\n        i.name,\n        i.description,\n        i.language||'nolang',\n        i.html_url,\n        owner\n      );\n    };\n\n    service.getUser()\n      .then(async gitUser => gitUser.map(userFactory).shift())\n      .then(setUser)\n      .catch(console.error)\n      .finally(() => console.log('user loaded!'));\n\n    service.getProjects()\n      .then(async gitProj => gitProj.map(gitToProject))\n      .then(setProjects)\n      .catch(console.error)\n      .finally(() => console.log('loaded!'));\n  }, []);\n\n  return {\n    projects,\n    user\n  };\n};\n","import { GitUser, Git } from 'value-objects';\n\nexport const githubApi = (user: string) => {\n  const base = 'https://api.github.com';\n\n  const getUser = async () => {\n    const request = await fetch(`${base}/users/${user}`);\n    const res = await request.json() as GitUser;\n    return [res];\n  };\n\n  const getProjects = async () => {\n    const request = await fetch(`${base}/users/${user}/repos`);\n    const repos = await request.json() as Git[];\n    return repos;\n  };\n\n  return {\n    getProjects,\n    getUser\n  };\n};\n","import { OwnerMiniature } from 'entities';\n\nexport const ownerFactory = (name: string, avatar: string) => ({\n  name,\n  avatar\n} as OwnerMiniature);\n","import { OwnerMiniature, Project } from 'entities';\n\ntype ProjectFactory = (\n  name: string, \n  description: string, \n  language: string, \n  link: string,\n  owner: OwnerMiniature) => Project;\n\nexport const projectFactory: ProjectFactory = (name, description, language, link, owner) => ({\n  name,\n  description,\n  language,\n  link,\n  owner\n});\n","import React from 'react';\nimport { User } from 'entities';\n\ntype Props = {\n  user: User;\n}\n\nexport const Avatar = (props: Props) => (\n  <div className=\"w-full py-10\">\n    <div className=\"flex flex-col sm:flex-row space-x-7\">\n      <div className=\"flex flex-col-reverse\">\n        <img\n          src={props.user.avatar}\n          alt={props.user.name}\n          className=\"rounded-full border-purple-800 border-2 mx-auto sm:mx-0 h-28\"\n          title={props.user.name}\n        />\n      </div>\n      <div className=\"flex flex-col justify-center pt-5\">\n        <a href={props.user.link} className=\"text-blue-500\">@{props.user.at}</a>\n        <h2 className=\"text-4xl font-bold\">{props.user.name}</h2>\n        <p>{props.user.bio}</p>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport Project from 'components/Project';\nimport { useGitHub } from './hooks';\nimport { Avatar } from 'components/Avatar';\n\nexport const Home = () => {\n  const { projects, user } = useGitHub('githiago-f');\n  return (\n    <>\n      <div hidden={!user}>\n        {(user && <Avatar user={user} />)}\n      </div>\n      <Project.List\n        projects={projects}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport Theme from './theme';\nimport { Home } from 'pages/Home';\nimport { LangaugeContext, useLanguage } from 'context/language.context';\n\nconst App = () => {\n  const langHooksValue = useLanguage();\n  return (\n    <React.StrictMode>\n      <LangaugeContext.Provider value={langHooksValue}>\n        <Theme data-language={langHooksValue.language}>\n          <Home />\n        </Theme>\n      </LangaugeContext.Provider>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\nimport './assets/css/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}